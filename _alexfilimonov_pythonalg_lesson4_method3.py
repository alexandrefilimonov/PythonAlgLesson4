#2b. Написать два алгоритма нахождения i-го по счёту простого числа.
#Второй - с использованием «Решета Эратосфена»; проанализировать скорость и сложность алгоритмов. 
#Результаты анализа сохранить в виде комментариев в файле с кодом.

import math 

def finding_n_with_eratosfen(m):
    n = int(1.28036*m*math.log(0.677361*m+1.92947,math.exp(1))+5)  #n аппроксимируется по порядковому номеру простого числа
    
    a = [0] * n 		# создание массива с n количеством элементов
    for i in range(n): 
        a[i] = i 		# значениями от 0 до n-1    

    # вторым элементом является 1, она не простое число ==> 0
    a[1] = 0
 
    k = 2 			# замена на 0 начинается с 3-го элемента (первые два - нули)
    while k < n: 		# перебор всех элементов до заданного числа
        if a[k] != 0: 
            j = k * 2 		# увеличить в два раза (текущий элемент простое число)
            while j < n:
                a[j] = 0 	# заменить на ноль ==> 0
                j = j + k 	# в позицию на +k 
        k += 1
     
    # вывод простых чисел на экран до N:
    b = []
    j=0
    primary_number_m=0
    for i in a:
        if a[i] != 0:		# нашли простое число 
            b.append(a[i])
            j+=1
            if (j==m) :		# простое число с порядковым номером m найдено и возвращается как результат работы метода 
                primary_number_m=a[i]               
                break 
    #print(b)
    return primary_number_m 

print("The 3rd Prime number is ", finding_n_with_eratosfen(3)) 
print("The 13th Prime number is ", finding_n_with_eratosfen(13))
print("The 139th Prime number is ", finding_n_with_eratosfen(139)) 
print("The 1394th Prime number is ", finding_n_with_eratosfen(1394))
print("The 13941th Prime number is ", finding_n_with_eratosfen(13941)) 

#сложность алгоритма, используя алгоритм «Решето Эратосфена», составляет O(n log⁡ (log ⁡ n)) операций при составлении таблицы простых чисел до n. 
#однако это не сложность работы метода finding_n_with_eratosfen, который выводит просто число по его номеру.

#!!! сложность работы метода finding_n_with_eratosfen, который выводит просто число по его номеру m - O(m * ln(m) * log⁡ (log ⁡ m * ln(m)))

#В https://cyberleninka.ru/article/v/metod-vychisleniya-prostyh-chisel-approksimatsiya-znacheniy-prostyh-chisel-kak-diskretnoy-funktsii-ot-poryadkovogo-nomera 
#приводится аппроксимирующая функция N = am*ln(b*m+c)
#где 	N - cамо простое число, 
#	m - его порядковый номер числа из ряда, где порядковый номер 1 для простлого число 2, порядковый номер 2 - для простого числа 3, порядковый номер 3 - для простого числа 5,  и т.д.
#	a=1.28036
#	b=0.677361
#	c=1.92947 

#прикидка аппроксимации N = am*ln(b*m+c) в Excel дала неплохие данные:
#1)простое число			5	17	29	37
#2)результат аппрокс.функции		10.69	56.56	114.04	156.12
#3)размер N Решетки Эратосфена 		11	61	111	161
#Общий вывод - значения в 2) и 3) очень близки, для точности добавляем константу +5, чтобы число в строке 3) было меньше или равно чем число в 2)+const=5




